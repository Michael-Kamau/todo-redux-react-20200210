{"version":3,"sources":["components/layout/Navbar.js","components/posts/AddPost.js","actions/postActions.js","actions/types.js","components/posts/Post.js","components/posts/AllPosts.js","App.js","serviceWorker.js","reducers/postReducer.js","reducers/index.js","store.js","index.js"],"names":["Navbar","className","AddPost","props","state","title","body","onChange","bind","onSubmit","e","this","setState","target","name","value","preventDefault","post","userId","completed","createPost","margin","width","padding","style","formStyle","placeholder","type","required","Component","connect","postData","dispatch","console","log","fetch","method","headers","JSON","stringify","then","res","json","payload","index","textDecoration","onClick","id","AllPosts","nextProps","nextContext","newPost","posts","unshift","textAlign","alignContent","cardsStyle","map","key","items","item","App","fetchPosts","Boolean","window","location","hostname","match","initialState","combineReducers","action","filter","slice","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5574614f.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Navbar() {\n\n        return (\n            <div>\n                <h2 className=\"ui top attached header\">Prime Todos</h2>\n\n            </div>\n        )\n\n}\n\nexport default Navbar\n","import React, {Component} from \"react\";\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {createPost} from '../../actions/postActions'\n\nclass AddPost extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            title:'',\n            body:''\n        }\n\n        this.onChange=this.onChange.bind(this);\n        this.onSubmit=this.onSubmit.bind(this)\n    }\n    onChange(e){\n        this.setState({[e.target.name]:e.target.value})\n    }\n\n    onSubmit(e){\n        e.preventDefault()\n        const post={\n            userId:1,\n            title:this.state.title,\n            completed:false\n        }\n\n        this.props.createPost(post)\n    }\n\n    formStyle(){\n        return{\n            margin:'20px 40px',\n            width:'580px',\n            padding:'20px',\n        }\n\n    }\n    render() {\n        return (\n            <form className=\"ui form card\" onSubmit={this.onSubmit} style={this.formStyle()}>\n                <h4>Add Todo</h4>\n                <div className=\"field\">\n                    <label>Todo Title</label>\n                    <input placeholder=\"Post Title\"  type='text' name='title' onChange={this.onChange} value={this.state.title} required/>\n                </div>\n                <button type=\"submit\" className=\"ui button\" >Submit</button>\n                {/*<button type=\"button\" className=\"ui button\" onClick={() => dispatch({type: \"NEW_POST\"})}>Submit</button>*/}\n            </form>\n        )\n    }\n\n}\n\nAddPost.propTypes={\n    createPost:PropTypes.func.isRequired\n};\nexport default connect(null, {createPost})(AddPost)\n","import {FETCH_POSTS, NEW_POST} from \"./types\";\n\n\nexport const fetchPosts = () => dispatch => {\n    console.log('fetching')\n    fetch('https://jsonplaceholder.typicode.com/todos')\n        .then(res => res.json())\n        .then(posts => dispatch({\n            type: FETCH_POSTS,\n            payload: posts\n        }))\n}\n\n\n// export const createPost = (postData) => dispatch => {\n//     console.log(postData)\n//         .then(post=>dispatch({\n//             type:NEW_POST,\n//             payload:post\n//         }))\n// }\n\nexport const createPost=(postData)=> dispatch=> {\n    console.log('action called')\n    fetch('https://jsonplaceholder.typicode.com/todos',{\n        method:'POST',\n        headers:{\n            'content-type':'application/json'\n        },\n        body:JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(post=>dispatch({\n            type:NEW_POST,\n            payload:post\n        }))\n}\n\n","export const FETCH_POSTS='FETCH_POSTS'\nexport const NEW_POST='NEW_POST'\nexport const DELETE_POST= 'DELETE_POST'\nexport const TOGGLE_COMPLETE='TOGGLE_COMPLETE'\n","import React from \"react\";\nimport {connect} from 'react-redux'\n\n\nfunction Post( {dispatch,post, index}){\n    // const {  } = this.props\n\n    const getStyle=()=>{\n        return{\n            textDecoration:post.completed ? 'line-through':'none'\n        }\n    }\n\n\n    return(\n            <div className=\"ui card\">\n                <div className=\"content\">\n\n                    <div className=\"header\" > <h3>Todo</h3></div>\n                    <p style={getStyle()}>{post.title}</p>\n\n                </div>\n                <div className=\"extra content\">\n                    <div className=\"ui two buttons\">\n                        {post.completed? (\n                            <button className=\"ui blue basic button\" onClick={()=>dispatch({type:\"TOGGLE_COMPLETE\",payload:index})}>Incomplete</button>\n\n                        ):(\n                            <button className=\"ui green basic button\"  onClick={()=>dispatch({type:\"TOGGLE_COMPLETE\",payload:index})}>Completed</button>\n\n                        )}\n                        <button className=\"ui red basic button\" onClick={()=>dispatch({type:\"DELETE_POST\",payload:post.id})}>Delete</button>\n                    </div>\n                </div>\n            </div>\n\n    )\n}\n\n\n\nexport default connect()(Post)\n","import React, {Component} from \"react\";\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport Post from './Post'\n\nclass AllPosts extends Component {\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log(nextProps)\n        if (nextProps.newPost) {\n            console.log(nextProps.newPost)\n            this.props.posts.unshift(nextProps.newPost)\n        }\n    }\n\n    cardsStyle(){\n        return{\n            textAlign:'center',\n            alignContent:'center'\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"text-center\" style={this.cardsStyle()}>\n                <h1>All Todos</h1>\n                <div className=\"ui cards\" >\n                    {\n                        this.props.posts.map((post, index) => (\n                            <Post key={index} index={index} post={post}/>\n                        ))\n                    }\n                </div>\n\n\n\n            </div>\n        )\n\n\n    }\n}\n// AllPosts.protoTypes={\n//     posts: PropTypes.array.isRequired,\n//     newPost: PropTypes.object\n// }\nconst mapStateToProps = state => ({\n    posts: state.posts.items,\n    newPost: state.posts.item,\n\n})\n\nexport default connect(mapStateToProps)(AllPosts)\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport './App.css';\nimport PropTypes from 'prop-types'\nimport {fetchPosts} from \"./actions/postActions\";\n\nimport Navbar from \"./components/layout/Navbar\";\nimport AddPost from \"./components/posts/AddPost\";\nimport AllPosts from \"./components/posts/AllPosts\";\n\n\nclass  App extends Component{\n\n    componentWillMount() {\n        this.props.fetchPosts()\n    }\n\n\n    render(){\n        return (\n            <div className=\"App\">\n                <Navbar/>\n                <AddPost/>\n                <AllPosts/>\n            </div>\n        );\n    }\n}\n\nApp.propTypes={\n    fetchPosts:PropTypes.func.isRequired\n}\n\n\nexport default connect(null,{fetchPosts})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {FETCH_POSTS, NEW_POST, DELETE_POST,TOGGLE_COMPLETE} from \"../actions/types\";\n\nconst initialState = {\n    items: [\n        {\n            \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"delectus aut autem\",\n            \"completed\": false\n        },\n        {\n            \"userId\": 1,\n            \"id\": 2,\n            \"title\": \"quis ut nam facilis et officia qui\",\n            \"completed\": false\n        },\n        {\n            \"userId\": 1,\n            \"id\": 3,\n            \"title\": \"fugiat veniam minus\",\n            \"completed\": false\n        },\n        {\n            \"userId\": 1,\n            \"id\": 4,\n            \"title\": \"et porro tempora\",\n            \"completed\": true\n        },\n        {\n            \"userId\": 1,\n            \"id\": 5,\n            \"title\": \"laboriosam mollitia et enim quasi adipisci quia provident illum\",\n            \"completed\": false\n        }\n    ],\n    item: {}\n}\n\n//Checking the necessary actions\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case FETCH_POSTS:\n            console.log('FETCH POST REDUCER')\n            console.log(action.payload)\n            // return state\n            return {\n                ...state,\n                items: action.payload\n            }\n\n        case NEW_POST:\n            console.log('THE DATA HAS BEEN RECEIVED AND IS BEING PROCESSED')\n            console.log(action.payload)\n            return {\n                ...state,\n                item: action.payload\n            };\n        case DELETE_POST:\n            console.log('DELETE POST REDUCER')\n            return {\n                ...state,\n                items:[...state.items.filter(item=>item.id!==action.payload)]\n            };\n        case TOGGLE_COMPLETE:\n            console.log('TOGGLE_COMPLETE POST REDUCER')\n            console.log(action.payload)\n            return{\n                ...state,\n                items:[...state.items.slice(0,action.payload),{...state.items[action.payload],completed:!state.items[action.payload].completed},...state.items.slice(action.payload+1),]\n            };\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport postReducer from \"./postReducer\";\n\nexport default combineReducers({\n    posts:postReducer\n})\n","import {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from 'redux-thunk'\n\nimport rootReducer from './reducers'\n\n\nconst initialState = {}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n)\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}